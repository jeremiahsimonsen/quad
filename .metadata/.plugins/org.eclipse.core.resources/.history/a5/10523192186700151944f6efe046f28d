/**
 * @file I2C_Msp.c
 *
 * @brief MSP functions and interrupts for I2C
 *
 * @author Jeremiah Simonsen
 *
 * @date Sep 29, 2015
 *
 */

#include "I2C_Msp.h"
#include "stm32f4xx_hal.h"
#include "stm32f4_discovery.h"

static DMA_HandleTypeDef hdma_tx;
static DMA_HandleTypeDef hdma_rx;

///////////////////////////////////////////////////////////////////////
//                     Function Pre-Declarations                     //
///////////////////////////////////////////////////////////////////////
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c);
void I2C1_MspInit(void);
void I2C2_MspInit(void);
void I2C3_MspInit(void);

#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wunused-parameter"
void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c) {
	uint32_t I2Cx = (uint32_t)hi2c->Instance;

	// Initialize the appropriate I2C peripheral
	switch(I2Cx) {
	case (uint32_t)I2C1: I2C1_MspInit(hi2c); break;
	case (uint32_t)I2C1: I2C2_MspInit(hi2c); break;
	case (uint32_t)I2C3: I2C3_MspInit(hi2c); break;
	default: break;
	}
}
#pragma GCC diagnostic pop

void I2C1_MspInit(I2C_HandleTypeDef *hi2c) {
	// Enable the I2C peripheral clock
	__HAL_RCC_I2C1_CLK_ENABLE();

	// Enable the DMA clock
	__HAL_RCC_DMA1_CLK_ENABLE();

	// Configure DMA for tx
	hdma_tx.Instance				 = I2C1_TX_DMA_STREAM;
	hdma_tx.Init.Channel 			 = I2C1_TX_DMA_CHANNEL;
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
	hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
	hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
	hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
	hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;

	HAL_DMA_Init(&hdma_tx);

	// Associate the initialized DMA handle to the I2C handle
	__HAL_LINKDMA(hi2c, hdmatx, hdma_tx);

	// Configure DMA for rx
	hdma_rx.Instance                 = I2C1_RX_DMA_STREAM;
	hdma_rx.Init.Channel             = I2C1_RX_DMA_CHANNEL;
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
	hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
	hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
	hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
	hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
	hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

	HAL_DMA_Init(&hdma_rx);

	// Associate the initialized DMA handle to the I2C handle
	__HAL_LINKDMA(hi2c, hdmarx, hdma_rx);

	// Configure NVIC for DMA
	HAL_NVIC_SetPriority(I2C1_DMA_TX_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(I2C1_DMA_TX_IRQn);

	HAL_NVIC_SetPriority(I2C1_DMA_RX_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(I2C1_DMA_RX_IRQn);
}

void I2C2_MspInit(I2C_HandleTypeDef *hi2c) {
	__HAL_RCC_I2C2_CLK_ENABLE();

	// Enable the DMA clock
	__HAL_RCC_DMA1_CLK_ENABLE();

	// Configure DMA for tx
	hdma_tx.Instance				 = I2C2_TX_DMA_STREAM;
	hdma_tx.Init.Channel 			 = I2C2_TX_DMA_CHANNEL;
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
	hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
	hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
	hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
	hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;

	HAL_DMA_Init(&hdma_tx);

	// Associate the initialized DMA handle to the I2C handle
	__HAL_LINKDMA(hi2c, hdmatx, hdma_tx);

	// Configure DMA for rx
	hdma_rx.Instance                 = I2C2_RX_DMA_STREAM;
	hdma_rx.Init.Channel             = I2C2_RX_DMA_CHANNEL;
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
	hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
	hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
	hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
	hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
	hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

	HAL_DMA_Init(&hdma_rx);

	// Associate the initialized DMA handle to the I2C handle
	__HAL_LINKDMA(hi2c, hdmarx, hdma_rx);

	// Configure NVIC for DMA
	HAL_NVIC_SetPriority(I2C2_DMA_TX_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(I2C2_DMA_TX_IRQn);

	HAL_NVIC_SetPriority(I2C2_DMA_RX_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(I2C2_DMA_RX_IRQn);
}

void I2C3_MspInit(I2C_HandleTypeDef *hi2c) {
	__HAL_RCC_I2C3_CLK_ENABLE();

	// Enable the DMA clock
	__HAL_RCC_DMA1_CLK_ENABLE();

	// Configure DMA for tx
	hdma_tx.Instance				 = I2C3_TX_DMA_STREAM;
	hdma_tx.Init.Channel 			 = I2C3_TX_DMA_CHANNEL;
	hdma_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
	hdma_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_tx.Init.MemInc              = DMA_MINC_ENABLE;
	hdma_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_tx.Init.Mode                = DMA_NORMAL;
	hdma_tx.Init.Priority            = DMA_PRIORITY_LOW;
	hdma_tx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
	hdma_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
	hdma_tx.Init.MemBurst            = DMA_MBURST_INC4;
	hdma_tx.Init.PeriphBurst         = DMA_PBURST_INC4;

	HAL_DMA_Init(&hdma_tx);

	// Associate the initialized DMA handle to the I2C handle
	__HAL_LINKDMA(hi2c, hdmatx, hdma_tx);

	// Configure DMA for rx
	hdma_rx.Instance                 = I2C3_RX_DMA_STREAM;
	hdma_rx.Init.Channel             = I2C3_RX_DMA_CHANNEL;
	hdma_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
	hdma_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
	hdma_rx.Init.MemInc              = DMA_MINC_ENABLE;
	hdma_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
	hdma_rx.Init.MemDataAlignment    = DMA_MDATAALIGN_BYTE;
	hdma_rx.Init.Mode                = DMA_NORMAL;
	hdma_rx.Init.Priority            = DMA_PRIORITY_HIGH;
	hdma_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
	hdma_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
	hdma_rx.Init.MemBurst            = DMA_MBURST_INC4;
	hdma_rx.Init.PeriphBurst         = DMA_PBURST_INC4;

	HAL_DMA_Init(&hdma_rx);

	// Associate the initialized DMA handle to the I2C handle
	__HAL_LINKDMA(hi2c, hdmarx, hdma_rx);

	// Configure NVIC for DMA
	HAL_NVIC_SetPriority(I2C3_DMA_TX_IRQn, 1, 0);
	HAL_NVIC_EnableIRQ(I2C3_DMA_TX_IRQn);

	HAL_NVIC_SetPriority(I2C3_DMA_RX_IRQn, 0, 0);
	HAL_NVIC_EnableIRQ(I2C3_DMA_RX_IRQn);
}
